
AVRASM ver. 2.1.30  C:\ChipAVR\Practica4_PacMan\Debug\List\Practica4_PacMan.asm Sun Apr 14 18:22:11 2024

                 
                 
                 ;CodeVisionAVR C Compiler V4.02 Evaluation
                 ;(C) Copyright 1998-2024 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega328P
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: Off
                 ;Smart register allocation: Off
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega328P
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPMCSR=0x37
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x08FF
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.EQU __FLASH_PAGE_SIZE=0x40
                 	.EQU __EEPROM_PAGE_SIZE=0x04
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETW1P
                 	LD   R30,X+
                 	LD   R31,X
                 	SBIW R26,1
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD1P_INC
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X+
                 	LD   R23,X+
                 	.ENDM
                 
                 	.MACRO __GETD1P_DEC
                 	LD   R23,-X
                 	LD   R22,-X
                 	LD   R31,-X
                 	LD   R30,-X
                 	.ENDM
                 
                 	.MACRO __PUTDP1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTDP1_DEC
                 	ST   -X,R23
                 	ST   -X,R22
                 	ST   -X,R31
                 	ST   -X,R30
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __CPD10
                 	SBIW R30,0
                 	SBCI R22,0
                 	SBCI R23,0
                 	.ENDM
                 
                 	.MACRO __CPD20
                 	SBIW R26,0
                 	SBCI R24,0
                 	SBCI R25,0
                 	.ENDM
                 
                 	.MACRO __ADDD12
                 	ADD  R30,R26
                 	ADC  R31,R27
                 	ADC  R22,R24
                 	ADC  R23,R25
                 	.ENDM
                 
                 	.MACRO __ADDD21
                 	ADD  R26,R30
                 	ADC  R27,R31
                 	ADC  R24,R22
                 	ADC  R25,R23
                 	.ENDM
                 
                 	.MACRO __SUBD12
                 	SUB  R30,R26
                 	SBC  R31,R27
                 	SBC  R22,R24
                 	SBC  R23,R25
                 	.ENDM
                 
                 	.MACRO __SUBD21
                 	SUB  R26,R30
                 	SBC  R27,R31
                 	SBC  R24,R22
                 	SBC  R25,R23
                 	.ENDM
                 
                 	.MACRO __ANDD12
                 	AND  R30,R26
                 	AND  R31,R27
                 	AND  R22,R24
                 	AND  R23,R25
                 	.ENDM
                 
                 	.MACRO __ORD12
                 	OR   R30,R26
                 	OR   R31,R27
                 	OR   R22,R24
                 	OR   R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD12
                 	EOR  R30,R26
                 	EOR  R31,R27
                 	EOR  R22,R24
                 	EOR  R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD21
                 	EOR  R26,R30
                 	EOR  R27,R31
                 	EOR  R24,R22
                 	EOR  R25,R23
                 	.ENDM
                 
                 	.MACRO __COMD1
                 	COM  R30
                 	COM  R31
                 	COM  R22
                 	COM  R23
                 	.ENDM
                 
                 	.MACRO __MULD2_2
                 	LSL  R26
                 	ROL  R27
                 	ROL  R24
                 	ROL  R25
                 	.ENDM
                 
                 	.MACRO __LSRD1
                 	LSR  R23
                 	ROR  R22
                 	ROR  R31
                 	ROR  R30
                 	.ENDM
                 
                 	.MACRO __LSLD1
                 	LSL  R30
                 	ROL  R31
                 	ROL  R22
                 	ROL  R23
                 	.ENDM
                 
                 	.MACRO __ASRB4
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	.ENDM
                 
                 	.MACRO __ASRW8
                 	MOV  R30,R31
                 	CLR  R31
                 	SBRC R30,7
                 	SER  R31
                 	.ENDM
                 
                 	.MACRO __LSRD16
                 	MOV  R30,R22
                 	MOV  R31,R23
                 	LDI  R22,0
                 	LDI  R23,0
                 	.ENDM
                 
                 	.MACRO __LSLD16
                 	MOV  R22,R30
                 	MOV  R23,R31
                 	LDI  R30,0
                 	LDI  R31,0
                 	.ENDM
                 
                 	.MACRO __CWD1
                 	MOV  R22,R31
                 	ADD  R22,R22
                 	SBC  R22,R22
                 	MOV  R23,R22
                 	.ENDM
                 
                 	.MACRO __CWD2
                 	MOV  R24,R27
                 	ADD  R24,R24
                 	SBC  R24,R24
                 	MOV  R25,R24
                 	.ENDM
                 
                 	.MACRO __SETMSD1
                 	SER  R31
                 	SER  R22
                 	SER  R23
                 	.ENDM
                 
                 	.MACRO __ADDW1R15
                 	CLR  R0
                 	ADD  R30,R15
                 	ADC  R31,R0
                 	.ENDM
                 
                 	.MACRO __ADDW2R15
                 	CLR  R0
                 	ADD  R26,R15
                 	ADC  R27,R0
                 	.ENDM
                 
                 	.MACRO __EQB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __NEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRNE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __CPW01
                 	CLR  R0
                 	CP   R0,R30
                 	CPC  R0,R31
                 	.ENDM
                 
                 	.MACRO __CPW02
                 	CLR  R0
                 	CP   R0,R26
                 	CPC  R0,R27
                 	.ENDM
                 
                 	.MACRO __CPD12
                 	CP   R30,R26
                 	CPC  R31,R27
                 	CPC  R22,R24
                 	CPC  R23,R25
                 	.ENDM
                 
                 	.MACRO __CPD21
                 	CP   R26,R30
                 	CPC  R27,R31
                 	CPC  R24,R22
                 	CPC  R25,R23
                 	.ENDM
                 
                 	.MACRO __BSTB1
                 	CLT
                 	TST  R30
                 	BREQ PC+2
                 	SET
                 	.ENDM
                 
                 	.MACRO __LNEGB1
                 	TST  R30
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LNEGW1
                 	OR   R30,R31
                 	LDI  R30,1
                 	BREQ PC+2
                 	LDI  R30,0
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 006b 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
000034 2710
000035 03e8
000036 0064
000037 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000038 0001      	.DB  0x1,0x0
                 _tbl16_G100:
000039 1000
00003a 0100
00003b 0010
00003c 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x3:
00003d 0303
00003e 0203
00003f 0c02
000040 0800      	.DB  0x3,0x3,0x3,0x2,0x2,0xC,0x0,0x8
000041 0100
000042 0600      	.DB  0x0,0x1,0x0,0x6
                 _0x22:
000043 1d0e
000044 1e1f
000045 1f1f
C:\ChipAVR\Practica4_PacMan\Debug\List\Practica4_PacMan.asm(1467): warning: .cseg .db misalignment - padding zero byte
000046 000e      	.DB  0xE,0x1D,0x1F,0x1E,0x1F,0x1F,0xE
                 _0x23:
000047 1d0e
000048 181e
000049 1f1c
C:\ChipAVR\Practica4_PacMan\Debug\List\Practica4_PacMan.asm(1469): warning: .cseg .db misalignment - padding zero byte
00004a 000e      	.DB  0xE,0x1D,0x1E,0x18,0x1C,0x1F,0xE
                 _0x24:
00004b 170e
00004c 0f1f
00004d 1f1f
C:\ChipAVR\Practica4_PacMan\Debug\List\Practica4_PacMan.asm(1471): warning: .cseg .db misalignment - padding zero byte
00004e 000e      	.DB  0xE,0x17,0x1F,0xF,0x1F,0x1F,0xE
                 _0x25:
00004f 170e
000050 030f
000051 1f07
C:\ChipAVR\Practica4_PacMan\Debug\List\Practica4_PacMan.asm(1473): warning: .cseg .db misalignment - padding zero byte
000052 000e      	.DB  0xE,0x17,0xF,0x3,0x7,0x1F,0xE
                 _0x0:
000053 2048
000054 2045
000055 204c
000056 204c      	.DB  0x48,0x20,0x45,0x20,0x4C,0x20,0x4C,0x20
000057 004f
000058 724d
000059 202e
00005a 6150      	.DB  0x4F,0x0,0x4D,0x72,0x2E,0x20,0x50,0x61
00005b 4d63
00005c 6e61
C:\ChipAVR\Practica4_PacMan\Debug\List\Practica4_PacMan.asm(1477): warning: .cseg .db misalignment - padding zero byte
00005d 0000      	.DB  0x63,0x4D,0x61,0x6E,0x0
                 
                 __GLOBAL_INI_TBL:
00005e 0007      	.DW  0x07
00005f 0301      	.DW  _PacMan1
000060 0086      	.DW  _0x22*2
                 
000061 0007      	.DW  0x07
000062 0309      	.DW  _PacMan2
000063 008e      	.DW  _0x23*2
                 
000064 0007      	.DW  0x07
000065 0311      	.DW  _PacMan3
000066 0096      	.DW  _0x24*2
                 
000067 0007      	.DW  0x07
000068 0319      	.DW  _PacMan4
000069 009e      	.DW  _0x25*2
                 
                 _0xFFFFFFFF:
00006a 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00006b 94f8      	CLI
                 
00006c 27ee      	CLR  R30
00006d bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00006e e0f1      	LDI  R31,1
00006f bff5      	OUT  MCUCR,R31
000070 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000071 e08d      	LDI  R24,(14-2)+1
000072 e0a2      	LDI  R26,2
000073 27bb      	CLR  R27
                 __CLEAR_REG:
000074 93ed      	ST   X+,R30
000075 958a      	DEC  R24
000076 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000077 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000078 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000079 e0a0      	LDI  R26,LOW(__SRAM_START)
00007a e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00007b 93ed      	ST   X+,R30
00007c 9701      	SBIW R24,1
00007d f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00007e ebec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00007f e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000080 9185      	LPM  R24,Z+
000081 9195      	LPM  R25,Z+
000082 9700      	SBIW R24,0
000083 f061      	BREQ __GLOBAL_INI_END
000084 91a5      	LPM  R26,Z+
000085 91b5      	LPM  R27,Z+
000086 9005      	LPM  R0,Z+
000087 9015      	LPM  R1,Z+
000088 01bf      	MOVW R22,R30
000089 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00008a 9005      	LPM  R0,Z+
00008b 920d      	ST   X+,R0
00008c 9701      	SBIW R24,1
00008d f7e1      	BRNE __GLOBAL_INI_LOOP
00008e 01fb      	MOVW R30,R22
00008f cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
000090 e0e0      	LDI  R30,__GPIOR0_INIT
000091 bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000092 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000093 bfed      	OUT  SPL,R30
000094 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000095 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000096 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000097 e0d3      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000098 940c 016e 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x300
                 
                 	.CSEG
                         .equ __lcd_port=0x0b
                         .equ __lcd_EN=3
                         .equ __lcd_RS=2
                         .equ __lcd_D4=4
                         .equ __lcd_D5=5
                         .equ __lcd_D6=6
                         .equ __lcd_D7=7
                 ; 0000 0010        #endasm
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 
                 	.CSEG
                 _SetupLCD:
                 ; .FSTART _SetupLCD
00009a 972c      	SBIW R28,12
00009b e08c      	LDI  R24,12
                +
00009c e060     +LDI R22 , LOW ( 0 )
00009d e070     +LDI R23 , HIGH ( 0 )
                 	__GETWRN 22,23,0
00009e e7ea      	LDI  R30,LOW(_0x3*2)
00009f e0f0      	LDI  R31,HIGH(_0x3*2)
0000a0 d1a0      	RCALL __INITLOCB
0000a1 930a      	ST   -Y,R16
                 ;	TableSetup -> Y+1
                 ;	i -> R16
                 ; 0000 0014     SBI __lcd_port-1,__lcd_EN
0000a2 9a53          SBI __lcd_port-1,__lcd_EN
0000a3 9a52          SBI __lcd_port-1,__lcd_RS
0000a4 9a54          SBI __lcd_port-1,__lcd_D4
0000a5 9a55          SBI __lcd_port-1,__lcd_D5
0000a6 9a56          SBI __lcd_port-1,__lcd_D6
0000a7 9a57          SBI __lcd_port-1,__lcd_D7
0000a8 e3a2      	LDI  R26,LOW(50)
0000a9 e0b0      	LDI  R27,0
0000aa d1a2      	RCALL _delay_ms
0000ab e000      	LDI  R16,LOW(0)
                 _0x5:
0000ac 300c      	CPI  R16,12
0000ad f470      	BRSH _0x6
0000ae e0a2      	LDI  R26,LOW(2)
0000af e0b0      	LDI  R27,0
0000b0 d19c      	RCALL _delay_ms
0000b1 2fe0      	MOV  R30,R16
0000b2 e0f0      	LDI  R31,0
0000b3 01de      	MOVW R26,R28
0000b4 9611      	ADIW R26,1
0000b5 0fae      	ADD  R26,R30
0000b6 1fbf      	ADC  R27,R31
0000b7 91ac      	LD   R26,X
0000b8 d00f      	RCALL _SendDataBitsLCD
0000b9 d00b      	RCALL _PulseEn
0000ba 5f0f      	SUBI R16,-1
0000bb cff0      	RJMP _0x5
                 _0x6:
0000bc e0ec      	LDI  R30,LOW(12)
0000bd 93e0 0300 	STS  _cursor,R30
0000bf 91a0 0300 	LDS  R26,_cursor
0000c1 d01d      	RCALL _WriteComandLCD
0000c2 8108      	LDD  R16,Y+0
0000c3 962d      	ADIW R28,13
0000c4 9508      	RET
                 ; .FEND
                 _PulseEn:
                 ; .FSTART _PulseEn
0000c5 9a5b          SBI __lcd_port,__lcd_EN  // EN=1;
0000c6 985b          CBI __lcd_port,__lcd_EN // EN=0;
0000c7 9508      	RET
                 ; .FEND
                 _SendDataBitsLCD:
                 ; .FSTART _SendDataBitsLCD
0000c8 930a      	ST   -Y,R16
0000c9 2f0a      	MOV  R16,R26
                 ;	dato -> R16
0000ca ff03      	SBRS R16,3
0000cb c002      	RJMP _0x7
0000cc 9a5f      	SBI __lcd_port,__lcd_D7
0000cd c001      	RJMP _0x8
                 _0x7:
0000ce 985f      	CBI __lcd_port,__lcd_D7
                 _0x8:
0000cf ff02      	SBRS R16,2
0000d0 c002      	RJMP _0x9
0000d1 9a5e      	SBI __lcd_port,__lcd_D6
0000d2 c001      	RJMP _0xA
                 _0x9:
0000d3 985e      	CBI __lcd_port,__lcd_D6
                 _0xA:
0000d4 ff01      	SBRS R16,1
0000d5 c002      	RJMP _0xB
0000d6 9a5d      	SBI __lcd_port,__lcd_D5
0000d7 c001      	RJMP _0xC
                 _0xB:
0000d8 985d      	CBI __lcd_port,__lcd_D5
                 _0xC:
0000d9 ff00      	SBRS R16,0
0000da c002      	RJMP _0xD
0000db 9a5c      	SBI __lcd_port,__lcd_D4
0000dc c001      	RJMP _0xE
                 _0xD:
0000dd 985c      	CBI __lcd_port,__lcd_D4
                 _0xE:
0000de c08d      	RJMP _0x2060001
                 ; .FEND
                 _WriteComandLCD:
                 ; .FSTART _WriteComandLCD
0000df 931a      	ST   -Y,R17
0000e0 930a      	ST   -Y,R16
0000e1 2f1a      	MOV  R17,R26
                 ;	Comando -> R17
                 ;	tempComando -> R16
0000e2 985a      	CBI __lcd_port,__lcd_RS
0000e3 c004      	RJMP _0x2060003
                 ; .FEND
                 _CharLCD:
                 ; .FSTART _CharLCD
0000e4 931a      	ST   -Y,R17
0000e5 930a      	ST   -Y,R16
0000e6 2f1a      	MOV  R17,R26
                 ;	dato -> R17
                 ;	tempdato -> R16
0000e7 9a5a      	SBI __lcd_port,__lcd_RS
                 _0x2060003:
0000e8 e0a2      	LDI  R26,LOW(2)
0000e9 e0b0      	LDI  R27,0
0000ea d162      	RCALL _delay_ms
0000eb 2fe1      	MOV  R30,R17
0000ec 7fe0      	ANDI R30,LOW(0xF0)
0000ed 2f0e      	MOV  R16,R30
0000ee 9502      	SWAP R16
0000ef 700f      	ANDI R16,0xF
0000f0 2fa0      	MOV  R26,R16
0000f1 dfd6      	RCALL _SendDataBitsLCD
0000f2 dfd2      	RCALL _PulseEn
0000f3 2fe1      	MOV  R30,R17
0000f4 70ef      	ANDI R30,LOW(0xF)
0000f5 2f0e      	MOV  R16,R30
0000f6 2fa0      	MOV  R26,R16
0000f7 dfd0      	RCALL _SendDataBitsLCD
0000f8 e0a2      	LDI  R26,LOW(2)
0000f9 e0b0      	LDI  R27,0
0000fa d152      	RCALL _delay_ms
0000fb dfc9      	RCALL _PulseEn
0000fc 9109      	LD   R16,Y+
0000fd 9119      	LD   R17,Y+
0000fe 9508      	RET
                 ; .FEND
                 _StringLCD:
                 ; .FSTART _StringLCD
0000ff d138      	RCALL __SAVELOCR3
                +
000100 2f1a     +MOV R17 , R26
000101 2f2b     +MOV R18 , R27
                 	__PUTW2R 17,18
                 ;	Mensaje -> R17,R18
                 ;	i -> R16
000102 e000      	LDI  R16,LOW(0)
                 _0x10:
000103 2fe0      	MOV  R30,R16
000104 5f0f      	SUBI R16,-1
000105 e0f0      	LDI  R31,0
000106 0fe1      	ADD  R30,R17
000107 1ff2      	ADC  R31,R18
000108 91a4      	LPM  R26,Z
000109 dfda      	RCALL _CharLCD
00010a 2fe0      	MOV  R30,R16
00010b e0f0      	LDI  R31,0
00010c 0fe1      	ADD  R30,R17
00010d 1ff2      	ADC  R31,R18
00010e 91e4      	LPM  R30,Z
00010f 30e0      	CPI  R30,0
000110 f791      	BRNE _0x10
000111 d12b      	RCALL __LOADLOCR3
000112 c022      	RJMP _0x2060002
                 ; .FEND
                 ;	Mensaje -> R19,R20
                 ;	tiempo -> R17,R18
                 ;	i -> R16
                 ;	Mensaje -> R17,R18
                 ;	i -> R16
                 _MoveCursor:
                 ; .FSTART _MoveCursor
000113 931a      	ST   -Y,R17
000114 930a      	ST   -Y,R16
000115 2f0a      	MOV  R16,R26
000116 811a      	LDD  R17,Y+2
                 ;	x -> R17
                 ;	y -> R16
000117 2fe0      	MOV  R30,R16
000118 e0f0      	LDI  R31,0
000119 9730      	SBIW R30,0
00011a f419      	BRNE _0x1B
00011b 2fa1      	MOV  R26,R17
00011c 58a0      	SUBI R26,-LOW(128)
00011d c014      	RJMP _0x52
                 _0x1B:
00011e 30e1      	CPI  R30,LOW(0x1)
00011f e0a0      	LDI  R26,HIGH(0x1)
000120 07fa      	CPC  R31,R26
000121 f419      	BRNE _0x1C
000122 2fa1      	MOV  R26,R17
000123 54a0      	SUBI R26,-LOW(192)
000124 c00d      	RJMP _0x52
                 _0x1C:
000125 30e2      	CPI  R30,LOW(0x2)
000126 e0a0      	LDI  R26,HIGH(0x2)
000127 07fa      	CPC  R31,R26
000128 f419      	BRNE _0x1D
000129 2fa1      	MOV  R26,R17
00012a 56ac      	SUBI R26,-LOW(148)
00012b c006      	RJMP _0x52
                 _0x1D:
00012c 30e3      	CPI  R30,LOW(0x3)
00012d e0a0      	LDI  R26,HIGH(0x3)
00012e 07fa      	CPC  R31,R26
00012f f419      	BRNE _0x1A
000130 2fa1      	MOV  R26,R17
000131 52ac      	SUBI R26,-LOW(212)
                 _0x52:
000132 dfac      	RCALL _WriteComandLCD
                 _0x1A:
000133 8119      	LDD  R17,Y+1
000134 8108      	LDD  R16,Y+0
                 _0x2060002:
000135 9623      	ADIW R28,3
000136 9508      	RET
                 ; .FEND
                 _CreateChar:
                 ; .FSTART _CreateChar
000137 d0ff      	RCALL __SAVELOCR4
                +
000138 2f1a     +MOV R17 , R26
000139 2f2b     +MOV R18 , R27
                 	__PUTW2R 17,18
00013a 813c      	LDD  R19,Y+4
                 ;	NoCaracter -> R19
                 ;	datos -> R17,R18
                 ;	i -> R16
00013b 2fe3      	MOV  R30,R19
00013c 0fee      	LSL  R30
00013d 0fee      	LSL  R30
00013e 0fee      	LSL  R30
00013f 5ce0      	SUBI R30,-LOW(64)
000140 2fae      	MOV  R26,R30
000141 df9d      	RCALL _WriteComandLCD
000142 e000      	LDI  R16,LOW(0)
                 _0x20:
000143 3008      	CPI  R16,8
000144 f448      	BRSH _0x21
                +
000145 2fa1     +MOV R26 , R17
000146 2fb2     +MOV R27 , R18
                 	__GETW2R 17,18
000147 27ee      	CLR  R30
000148 0fa0      	ADD  R26,R16
000149 1fbe      	ADC  R27,R30
00014a 91ac      	LD   R26,X
00014b df98      	RCALL _CharLCD
00014c 5f0f      	SUBI R16,-1
00014d cff5      	RJMP _0x20
                 _0x21:
00014e e8a0      	LDI  R26,LOW(128)
00014f df8f      	RCALL _WriteComandLCD
000150 d0eb      	RCALL __LOADLOCR4
000151 9625      	ADIW R28,5
000152 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 ;unsigned char read_adc(unsigned char adc_input)
                 ; 0000 0027 {
                 
                 	.CSEG
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 0028 ADMUX=adc_input | ADC_VREF_TYPE;
000153 930a      	ST   -Y,R16
000154 2f0a      	MOV  R16,R26
                 ;	adc_input -> R16
000155 2fe0      	MOV  R30,R16
000156 66e0      	ORI  R30,LOW(0x60)
000157 93e0 007c 	STS  124,R30
                 ; 0000 0029 // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 002A delay_us(10);
                +
000159 e083     +LDI R24 , LOW ( 3 )
                +__DELAY_USB_LOOP :
00015a 958a     +DEC R24
00015b f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 3
                 ; 0000 002B // Start the AD conversion
                 ; 0000 002C ADCSRA|=(1<<ADSC);
00015c 91e0 007a 	LDS  R30,122
00015e 64e0      	ORI  R30,0x40
00015f 93e0 007a 	STS  122,R30
                 ; 0000 002D // Wait for the AD conversion to complete
                 ; 0000 002E while ((ADCSRA & (1<<ADIF))==0);
                 _0x26:
000161 91e0 007a 	LDS  R30,122
000163 71e0      	ANDI R30,LOW(0x10)
000164 f3e1      	BREQ _0x26
                 ; 0000 002F ADCSRA|=(1<<ADIF);
000165 91e0 007a 	LDS  R30,122
000167 61e0      	ORI  R30,0x10
000168 93e0 007a 	STS  122,R30
                 ; 0000 0030 return ADCH;
00016a 91e0 0079 	LDS  R30,121
                 _0x2060001:
00016c 9109      	LD   R16,Y+
00016d 9508      	RET
                 ; 0000 0031 }
                 ; .FEND
                 ;void delayPacMan();
                 ;void main(void)
                 ; 0000 0037 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0038 // VerifIrico apoyandonos del code Wizard, linea de la 141 a la 150
                 ; 0000 0039 // ADC initialization
                 ; 0000 003A // ADC Clock frequency: 500.000 kHz
                 ; 0000 003B // ADC Auto Trigger Source: Software
                 ; 0000 003C // Only the 8 most significant bits of
                 ; 0000 003D // the AD conversion result are used
                 ; 0000 003E ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (1<<ADPS0);
00016e e8e1      	LDI  R30,LOW(129)
00016f 93e0 007a 	STS  122,R30
                 ; 0000 003F ADCSRB=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
000171 e0e0      	LDI  R30,LOW(0)
000172 93e0 007b 	STS  123,R30
                 ; 0000 0040 // Digital input buffers on ADC0: Off, ADC1: On, ADC2: On, ADC3: On
                 ; 0000 0041 // ADC4: On, ADC5: On
                 ; 0000 0042 DIDR0=(0<<ADC5D) | (0<<ADC4D) | (0<<ADC3D) | (0<<ADC2D) | (0<<ADC1D) | (1<<ADC0D);
000174 e0e1      	LDI  R30,LOW(1)
000175 93e0 007e 	STS  126,R30
                 ; 0000 0043 
                 ; 0000 0044 SetupLCD();
000177 df22      	RCALL _SetupLCD
                 ; 0000 0045 CreateChar(0, PacMan1); // Pac Man boca cerrada derecha
000178 e0e0      	LDI  R30,LOW(0)
000179 93ea      	ST   -Y,R30
00017a e0a1      	LDI  R26,LOW(_PacMan1)
00017b e0b3      	LDI  R27,HIGH(_PacMan1)
00017c dfba      	RCALL _CreateChar
                 ; 0000 0046 CreateChar(1, PacMan2); // Pac Man boca abierta derecha
00017d e0e1      	LDI  R30,LOW(1)
00017e 93ea      	ST   -Y,R30
00017f e0a9      	LDI  R26,LOW(_PacMan2)
000180 e0b3      	LDI  R27,HIGH(_PacMan2)
000181 dfb5      	RCALL _CreateChar
                 ; 0000 0047 CreateChar(2, PacMan3); // Pac Man boca cerrada izquierda
000182 e0e2      	LDI  R30,LOW(2)
000183 93ea      	ST   -Y,R30
000184 e1a1      	LDI  R26,LOW(_PacMan3)
000185 e0b3      	LDI  R27,HIGH(_PacMan3)
000186 dfb0      	RCALL _CreateChar
                 ; 0000 0048 CreateChar(3, PacMan4); // Pac Man boca abierta izaquierda
000187 e0e3      	LDI  R30,LOW(3)
000188 93ea      	ST   -Y,R30
000189 e1a9      	LDI  R26,LOW(_PacMan4)
00018a e0b3      	LDI  R27,HIGH(_PacMan4)
00018b dfab      	RCALL _CreateChar
                 ; 0000 0049 PORTC.1 = 1; // Habilita la resistencia de pull-up del boton PC1
00018c 9a41      	SBI  0x8,1
                 ; 0000 004A while (1)
                 _0x2B:
                 ; 0000 004B {
                 ; 0000 004C MoveCursor(3,0);
00018d e0e3      	LDI  R30,LOW(3)
00018e 93ea      	ST   -Y,R30
00018f e0a0      	LDI  R26,LOW(0)
000190 df82      	RCALL _MoveCursor
                 ; 0000 004D StringLCD("H E L L O");
                +
000191 eaa6     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
000192 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
000193 df6b      	RCALL _StringLCD
                 ; 0000 004E MoveCursor(3,1);
000194 e0e3      	LDI  R30,LOW(3)
000195 93ea      	ST   -Y,R30
000196 e0a1      	LDI  R26,LOW(1)
000197 df7b      	RCALL _MoveCursor
                 ; 0000 004F StringLCD("Mr. PacMan");
                +
000198 eba0     +LDI R26 , LOW ( 2 * _0x0 + ( 10 ) )
000199 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 10 ) )
                 	__POINTW2FN _0x0,10
00019a df64      	RCALL _StringLCD
                 ; 0000 0050 /*
                 ; 0000 0051 while(i<16){
                 ; 0000 0052 MoveCursor(i,0);
                 ; 0000 0053 CharLCD(1);
                 ; 0000 0054 delayPacMan();
                 ; 0000 0055 MoveCursor(i,0);
                 ; 0000 0056 CharLCD(0);
                 ; 0000 0057 delayPacMan();
                 ; 0000 0058 MoveCursor(i,0);
                 ; 0000 0059 CharLCD(' ');
                 ; 0000 005A i++;
                 ; 0000 005B }
                 ; 0000 005C i--;
                 ; 0000 005D while (i>=0)
                 ; 0000 005E {
                 ; 0000 005F MoveCursor(i,1);
                 ; 0000 0060 CharLCD(3);
                 ; 0000 0061 delayPacMan();
                 ; 0000 0062 MoveCursor(i,1);
                 ; 0000 0063 CharLCD(2);
                 ; 0000 0064 delayPacMan();
                 ; 0000 0065 MoveCursor(i,1);
                 ; 0000 0066 CharLCD(' ');
                 ; 0000 0067 i--;
                 ; 0000 0068 }
                 ; 0000 0069 i++;
                 ; 0000 006A while (i<16)
                 ; 0000 006B {
                 ; 0000 006C MoveCursor(i,1);
                 ; 0000 006D CharLCD(1);
                 ; 0000 006E delayPacMan();
                 ; 0000 006F MoveCursor(i,1);
                 ; 0000 0070 CharLCD(0);
                 ; 0000 0071 delayPacMan();
                 ; 0000 0072 MoveCursor(i,1);
                 ; 0000 0073 CharLCD(' ');
                 ; 0000 0074 i++;
                 ; 0000 0075 }
                 ; 0000 0076 i--;
                 ; 0000 0077 while(i>=0){
                 ; 0000 0078 MoveCursor(i,0);
                 ; 0000 0079 CharLCD(3);
                 ; 0000 007A delayPacMan();
                 ; 0000 007B MoveCursor(i,0);
                 ; 0000 007C CharLCD(2);
                 ; 0000 007D delayPacMan();
                 ; 0000 007E MoveCursor(i,0);
                 ; 0000 007F CharLCD(' ');
                 ; 0000 0080 i--;
                 ; 0000 0081 }
                 ; 0000 0082 i++;
                 ; 0000 0083 
                 ; 0000 0084 }
                 ; 0000 0085 */
                 ; 0000 0086 do
                 _0x2F:
                 ; 0000 0087 {
                 ; 0000 0088 if (i == 16 && j == 0)
00019b 91a0 0321 	LDS  R26,_i
00019d 31a0      	CPI  R26,LOW(0x10)
00019e f421      	BRNE _0x32
00019f 91a0 0322 	LDS  R26,_j
0001a1 30a0      	CPI  R26,LOW(0x0)
0001a2 f009      	BREQ _0x33
                 _0x32:
0001a3 c007      	RJMP _0x31
                 _0x33:
                 ; 0000 0089 {
                 ; 0000 008A j = 1;
0001a4 e0e1      	LDI  R30,LOW(1)
0001a5 93e0 0322 	STS  _j,R30
                 ; 0000 008B i = 15;
0001a7 e0ef      	LDI  R30,LOW(15)
0001a8 93e0 0321 	STS  _i,R30
                 ; 0000 008C } else if (i < 0 && j == 1)
0001aa c02c      	RJMP _0x34
                 _0x31:
0001ab 91a0 0321 	LDS  R26,_i
0001ad 30a0      	CPI  R26,0
0001ae f424      	BRGE _0x36
0001af 91a0 0322 	LDS  R26,_j
0001b1 30a1      	CPI  R26,LOW(0x1)
0001b2 f009      	BREQ _0x37
                 _0x36:
0001b3 c006      	RJMP _0x35
                 _0x37:
                 ; 0000 008D {
                 ; 0000 008E j = 0;
0001b4 e0e0      	LDI  R30,LOW(0)
0001b5 93e0 0322 	STS  _j,R30
                 ; 0000 008F i = 0;
0001b7 93e0 0321 	STS  _i,R30
                 ; 0000 0090 } else if (i < 0 && j == 0)
0001b9 c01d      	RJMP _0x38
                 _0x35:
0001ba 91a0 0321 	LDS  R26,_i
0001bc 30a0      	CPI  R26,0
0001bd f424      	BRGE _0x3A
0001be 91a0 0322 	LDS  R26,_j
0001c0 30a0      	CPI  R26,LOW(0x0)
0001c1 f009      	BREQ _0x3B
                 _0x3A:
0001c2 c005      	RJMP _0x39
                 _0x3B:
                 ; 0000 0091 {
                 ; 0000 0092 i = 0;
0001c3 e0e0      	LDI  R30,LOW(0)
0001c4 93e0 0321 	STS  _i,R30
                 ; 0000 0093 j = 1;
0001c6 e0e1      	LDI  R30,LOW(1)
0001c7 c00d      	RJMP _0x53
                 ; 0000 0094 } else if (i == 16 && j == 1)
                 _0x39:
0001c8 91a0 0321 	LDS  R26,_i
0001ca 31a0      	CPI  R26,LOW(0x10)
0001cb f421      	BRNE _0x3E
0001cc 91a0 0322 	LDS  R26,_j
0001ce 30a1      	CPI  R26,LOW(0x1)
0001cf f009      	BREQ _0x3F
                 _0x3E:
0001d0 c006      	RJMP _0x3D
                 _0x3F:
                 ; 0000 0095 {
                 ; 0000 0096 i = 15;
0001d1 e0ef      	LDI  R30,LOW(15)
0001d2 93e0 0321 	STS  _i,R30
                 ; 0000 0097 j = 0;
0001d4 e0e0      	LDI  R30,LOW(0)
                 _0x53:
0001d5 93e0 0322 	STS  _j,R30
                 ; 0000 0098 }
                 ; 0000 0099 
                 ; 0000 009A 
                 ; 0000 009B if (PINC.1 == 0 && j == 0)
                 _0x3D:
                 _0x38:
                 _0x34:
0001d7 9931      	SBIC 0x6,1
0001d8 c004      	RJMP _0x41
0001d9 91a0 0322 	LDS  R26,_j
0001db 30a0      	CPI  R26,LOW(0x0)
0001dc f009      	BREQ _0x42
                 _0x41:
0001dd c001      	RJMP _0x40
                 _0x42:
                 ; 0000 009C {
                 ; 0000 009D MoveCursor(i,j);
0001de c01f      	RJMP _0x54
                 ; 0000 009E CharLCD(1);
                 ; 0000 009F delayPacMan();
                 ; 0000 00A0 MoveCursor(i,j);
                 ; 0000 00A1 CharLCD(0);
                 ; 0000 00A2 delayPacMan();
                 ; 0000 00A3 MoveCursor(i,j);
                 ; 0000 00A4 CharLCD(' ');
                 ; 0000 00A5 i++;
                 ; 0000 00A6 } else if (PINC.1 == 0 && j == 1)
                 _0x40:
0001df 9931      	SBIC 0x6,1
0001e0 c004      	RJMP _0x45
0001e1 91a0 0322 	LDS  R26,_j
0001e3 30a1      	CPI  R26,LOW(0x1)
0001e4 f009      	BREQ _0x46
                 _0x45:
0001e5 c005      	RJMP _0x44
                 _0x46:
                 ; 0000 00A7 {
                 ; 0000 00A8 MoveCursor(i,j);
0001e6 d03c      	RCALL SUBOPT_0x0
                 ; 0000 00A9 CharLCD(3);
0001e7 d041      	RCALL SUBOPT_0x1
                 ; 0000 00AA delayPacMan();
                 ; 0000 00AB MoveCursor(i,j);
                 ; 0000 00AC CharLCD(2);
0001e8 d044      	RCALL SUBOPT_0x2
                 ; 0000 00AD delayPacMan();
                 ; 0000 00AE MoveCursor(i,j);
                 ; 0000 00AF CharLCD(' ');
0001e9 d047      	RCALL SUBOPT_0x3
                 ; 0000 00B0 i--;
0001ea c026      	RJMP _0x55
                 ; 0000 00B1 } else if (PINC.1 == 1 && j == 0)
                 _0x44:
0001eb 9b31      	SBIS 0x6,1
0001ec c004      	RJMP _0x49
0001ed 91a0 0322 	LDS  R26,_j
0001ef 30a0      	CPI  R26,LOW(0x0)
0001f0 f009      	BREQ _0x4A
                 _0x49:
0001f1 c005      	RJMP _0x48
                 _0x4A:
                 ; 0000 00B2 {
                 ; 0000 00B3 MoveCursor(i,j);
0001f2 d030      	RCALL SUBOPT_0x0
                 ; 0000 00B4 CharLCD(3);
0001f3 d035      	RCALL SUBOPT_0x1
                 ; 0000 00B5 delayPacMan();
                 ; 0000 00B6 MoveCursor(i,j);
                 ; 0000 00B7 CharLCD(2);
0001f4 d038      	RCALL SUBOPT_0x2
                 ; 0000 00B8 delayPacMan();
                 ; 0000 00B9 MoveCursor(i,j);
                 ; 0000 00BA CharLCD(' ');
0001f5 d03b      	RCALL SUBOPT_0x3
                 ; 0000 00BB i--;
0001f6 c01a      	RJMP _0x55
                 ; 0000 00BC } else if (PINC.1 == 1 && j == 1)
                 _0x48:
0001f7 9b31      	SBIS 0x6,1
0001f8 c004      	RJMP _0x4D
0001f9 91a0 0322 	LDS  R26,_j
0001fb 30a1      	CPI  R26,LOW(0x1)
0001fc f009      	BREQ _0x4E
                 _0x4D:
0001fd c015      	RJMP _0x4C
                 _0x4E:
                 ; 0000 00BD {
                 ; 0000 00BE MoveCursor(i,j);
                 _0x54:
0001fe 91e0 0321 	LDS  R30,_i
000200 93ea      	ST   -Y,R30
000201 91a0 0322 	LDS  R26,_j
000203 df0f      	RCALL _MoveCursor
                 ; 0000 00BF CharLCD(1);
000204 e0a1      	LDI  R26,LOW(1)
000205 dede      	RCALL _CharLCD
                 ; 0000 00C0 delayPacMan();
000206 d016      	RCALL _delayPacMan
                 ; 0000 00C1 MoveCursor(i,j);
000207 d01b      	RCALL SUBOPT_0x0
                 ; 0000 00C2 CharLCD(0);
000208 e0a0      	LDI  R26,LOW(0)
000209 deda      	RCALL _CharLCD
                 ; 0000 00C3 delayPacMan();
00020a d012      	RCALL _delayPacMan
                 ; 0000 00C4 MoveCursor(i,j);
00020b d017      	RCALL SUBOPT_0x0
                 ; 0000 00C5 CharLCD(' ');
00020c e2a0      	LDI  R26,LOW(32)
00020d ded6      	RCALL _CharLCD
                 ; 0000 00C6 i++;
00020e 91e0 0321 	LDS  R30,_i
000210 5fef      	SUBI R30,-LOW(1)
                 _0x55:
000211 93e0 0321 	STS  _i,R30
                 ; 0000 00C7 }
                 ; 0000 00C8 } while (i<16 && i>=0);
                 _0x4C:
000213 91a0 0321 	LDS  R26,_i
000215 31a0      	CPI  R26,LOW(0x10)
000216 f414      	BRGE _0x4F
000217 30a0      	CPI  R26,0
000218 f40c      	BRGE _0x50
                 _0x4F:
000219 c001      	RJMP _0x30
                 _0x50:
00021a cf80      	RJMP _0x2F
                 _0x30:
                 ; 0000 00C9 
                 ; 0000 00CA }
00021b cf71      	RJMP _0x2B
                 ; 0000 00CB }
                 _0x51:
00021c cfff      	RJMP _0x51
                 ; .FEND
                 ;void delayPacMan(){
                 ; 0000 00CC void delayPacMan(){
                 _delayPacMan:
                 ; .FSTART _delayPacMan
                 ; 0000 00CD delay_ms(read_adc(0));
00021d e0a0      	LDI  R26,LOW(0)
00021e df34      	RCALL _read_adc
00021f e0f0      	LDI  R31,0
000220 01df      	MOVW R26,R30
000221 d02b      	RCALL _delay_ms
                 ; 0000 00CE }
000222 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _cursor:
000300           	.BYTE 0x1
                 _PacMan1:
000301           	.BYTE 0x8
                 _PacMan2:
000309           	.BYTE 0x8
                 _PacMan3:
000311           	.BYTE 0x8
                 _PacMan4:
000319           	.BYTE 0x8
                 _i:
000321           	.BYTE 0x1
                 _j:
000322           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:33 WORDS
                 SUBOPT_0x0:
000223 91e0 0321 	LDS  R30,_i
000225 93ea      	ST   -Y,R30
000226 91a0 0322 	LDS  R26,_j
000228 ceea      	RJMP _MoveCursor
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
000229 e0a3      	LDI  R26,LOW(3)
00022a deb9      	RCALL _CharLCD
00022b dff1      	RCALL _delayPacMan
00022c cff6      	RJMP SUBOPT_0x0
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
00022d e0a2      	LDI  R26,LOW(2)
00022e deb5      	RCALL _CharLCD
00022f dfed      	RCALL _delayPacMan
000230 cff2      	RJMP SUBOPT_0x0
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x3:
000231 e2a0      	LDI  R26,LOW(32)
000232 deb1      	RCALL _CharLCD
000233 91e0 0321 	LDS  R30,_i
000235 50e1      	SUBI R30,LOW(1)
000236 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR4:
000237 933a      	ST   -Y,R19
                 __SAVELOCR3:
000238 932a      	ST   -Y,R18
                 __SAVELOCR2:
000239 931a      	ST   -Y,R17
00023a 930a      	ST   -Y,R16
00023b 9508      	RET
                 
                 __LOADLOCR4:
00023c 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00023d 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00023e 8119      	LDD  R17,Y+1
00023f 8108      	LD   R16,Y
000240 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
000241 93af      	PUSH R26
000242 93bf      	PUSH R27
000243 01db      	MOVW R26,R22
000244 0fac      	ADD  R26,R28
000245 1fbd      	ADC  R27,R29
                 __INITLOC0:
000246 9005      	LPM  R0,Z+
000247 920d      	ST   X+,R0
000248 958a      	DEC  R24
000249 f7e1      	BRNE __INITLOC0
00024a 91bf      	POP  R27
00024b 91af      	POP  R26
00024c 9508      	RET
                 
                 _delay_ms:
00024d 9610      	adiw r26,0
00024e f039      	breq __delay_ms1
                 __delay_ms0:
00024f 95a8      	wdr
                +
000250 ef8a     +LDI R24 , LOW ( 0xFA )
000251 e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
000252 9701     +SBIW R24 , 1
000253 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
000254 9711      	sbiw r26,1
000255 f7c9      	brne __delay_ms0
                 __delay_ms1:
000256 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega328P register use summary:
r0 :   6 r1 :   1 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  39 r17:  21 r18:   7 r19:   4 r20:   0 r21:   0 r22:   4 r23:   1 
r24:  13 r25:   3 r26:  92 r27:  21 r28:   7 r29:   2 r30:  99 r31:  15 
x  :   6 y  :  33 z  :  10 
Registers used: 19 out of 35 (54.3%)

ATmega328P instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   5 add   :   5 
adiw  :   5 and   :   0 andi  :   4 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  11 
brge  :   4 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  14 brpl  :   0 brsh  :   2 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   0 
cbi   :   6 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   3 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   0 cpc   :   3 cpi   :  20 cpse  :   0 dec   :   3 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   0 inc   :   0 jmp   :  27 ld    :   6 ldd   :   8 ldi   :  80 
lds   :  24 lpm   :  12 lsl   :   3 lsr   :   0 mov   :  28 movw  :   6 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   0 
ori   :   3 out   :   6 pop   :   2 push  :   2 rcall :  53 ret   :  12 
reti  :   0 rjmp  :  42 rol   :   0 ror   :   0 sbc   :   0 sbci  :   0 
sbi   :  13 sbic  :   2 sbis  :   2 sbiw  :   7 sbr   :   0 sbrc  :   0 
sbrs  :   4 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  25 std   :   0 sts   :  15 sub   :   0 subi  :  10 swap  :   1 
tst   :   0 wdr   :   1 
Instructions used: 40 out of 116 (34.5%)

ATmega328P memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0004ae   1088    110   1198   32768   3.7%
[.dseg] 0x000100 0x000323      0     35     35    2048   1.7%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 5 warnings
